#include <Wire.h>
#include "MAX30105.h"
#include "spo2_algorithm.h"

MAX30105 particleSensor;

#define MAX_BRIGHTNESS 255

uint32_t irBuffer[100]; // Infrared LED sensor data
uint32_t redBuffer[100]; // Red LED sensor data
int32_t bufferLength; // Data length
int32_t spo2; // SPO2 value
int8_t validSPO2; // Indicator if SPO2 calculation is valid
int32_t heartRate; // Heart rate value
int8_t validHeartRate; // Indicator if heart rate calculation is valid

byte pulseLED = 11; // Must be on PWM pin
byte readLED = 13; // Blinks with each data read

void setup() {
  Serial.begin(115200);
  pinMode(pulseLED, OUTPUT);
  pinMode(readLED, OUTPUT);

  // Initialize MAX30102 sensor
  if (!particleSensor.begin(Wire, I2C_SPEED_STANDARD)) {
    Serial.println("MAX30105 was not found. Please check wiring/power.");
    while (1);
  }

  // Configure sensor settings
  particleSensor.setup(60, 4, 2, 100, 411, 4096);
}

void loop() {
  bufferLength = 100; // Buffer length of 100 stores 4 seconds of samples at 25sps

  // Read first 100 samples
  for (byte i = 0; i < bufferLength; i++) {
    while (particleSensor.available() == false) particleSensor.check();
    
    redBuffer[i] = particleSensor.getRed();
    irBuffer[i] = particleSensor.getIR();
    particleSensor.nextSample();

    Serial.print("Red="); Serial.print(redBuffer[i]);
    Serial.print(", IR="); Serial.println(irBuffer[i]);
  }

  // Calculate heart rate and SpO2
  maxim_heart_rate_and_oxygen_saturation(irBuffer, bufferLength, redBuffer, &spo2, &validSPO2, &heartRate, &validHeartRate);

  while (1) {
    for (byte i = 25; i < 100; i++) {
      redBuffer[i - 25] = redBuffer[i];
      irBuffer[i - 25] = irBuffer[i];
    }

    for (byte i = 75; i < 100; i++) {
      while (particleSensor.available() == false) particleSensor.check();
      
      digitalWrite(readLED, !digitalRead(readLED)); // Blink onboard LED

      redBuffer[i] = particleSensor.getRed();
      irBuffer[i] = particleSensor.getIR();
      particleSensor.nextSample();

      Serial.print("Red="); Serial.print(redBuffer[i]);
      Serial.print(", IR="); Serial.print(irBuffer[i]);
      Serial.print(", HR="); Serial.print(heartRate);
      Serial.print(", HR valid="); Serial.print(validHeartRate);
      Serial.print(", SPO2="); Serial.print(spo2);
      Serial.print(", SPO2 valid="); Serial.println(validSPO2);
    }

    // Recalculate HR and SpO2 after every new set of 25 samples
    maxim_heart_rate_and_oxygen_saturation(irBuffer, bufferLength, redBuffer, &spo2, &validSPO2, &heartRate, &validHeartRate);
  }
}
